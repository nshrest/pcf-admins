#!/bin/bash

set -e

if [ $# -ne 1 ]; then
    echo Usage: $(basename "$0") "APP_NAME"
    exit 1
fi

APP="$1"

GUIDS=$(cf curl "/v2/apps?q=name:${APP}" | jq -r '.resources[].metadata.guid')
if [ -s $GUIDS ]
then
	echo "App name is not valid. Exiting ...."
	exit 1
fi
echo
echo
#nl=false
for guid in $GUIDS; do
#    $nl && echo -ne "\n" || nl=true
    echo "Application: $APP ($guid)"
    ( cf curl "/v2/apps/$guid/stats" | \
        jq -r 'def bytes_to_megabytes_str(bytes):
                     bytes / pow(1024;2) * 10 |
                     floor / 10 |
                     tostring
               ;
               def number_to_percent_str(number):
                     number * 1000 |
                     floor / 10 |
                     tostring
               ;
               ["Index", "State", "Uptime", "IP", "Port", "CPU", "Mem", "Mem_Quota", "Disk", "Disk_Quota"],
               ( (keys | sort_by(. | tonumber) | .[]) as $key |
                 [ $key,
                   .[$key].state,
                   (.[$key].stats.uptime | tostring) + "s",
                   .[$key].stats.host,
                   .[$key].stats.port,
                   number_to_percent_str(.[$key].stats.usage.cpu) + "%",
                   bytes_to_megabytes_str(.[$key].stats.usage.mem) + "M",
                   bytes_to_megabytes_str(.[$key].stats.mem_quota) + "M",
                   bytes_to_megabytes_str(.[$key].stats.usage.disk) + "M",
                   bytes_to_megabytes_str(.[$key].stats.disk_quota) + "M" |
                     select (. == null) = "<null>" |
                     select (. == "") = "<empty>"
                 ]
               ) | @tsv' 2>/dev/null || \
        echo -e '-\t-\t-\t-\t-\t-\t-\t-\t-\t-'
    ) | column -ts$'\t'
done

echo
echo
